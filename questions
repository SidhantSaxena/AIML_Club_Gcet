1. Reverse A given Number
Ans. while (n != 0) {
        remainder = n % 10;
        rev = rev * 10 + remainder;
        n /= 10;
    }
--------------------------------------------------------------------------------------------------------------------------------------------
2. Find Number Is Armstrong Or Not
Ans.while(n>0)    
{    
r=n%10;    
sum=sum+(r*r*r);    
n=n/10;    
}    
if(temp==sum)    
printf("armstrong  number ");    
else    
printf("not armstrong number");    
---------------------------------------------------------------------------------------------------------------------------------------------
3. Calculate Sum of Natural Numbers
Ans. for (i = 1; i <= n; ++i) {
        sum += i;
    }
----------------------------------------------------------------------------------------------------------------------------------------------
4. Display Fibonacci Series
Ans.  printf("\n%d %d",n1,n2);//printing 0 and 1    
 for(i=2;i<number;++i)//loop starts from 2 because 0 and 1 are already printed    
 {    
  n3=n1+n2;    
  printf(" %d",n3);    
  n1=n2;    
  n2=n3;    
 }  
-----------------------------------------------------------------------------------------------------------------------------------------------
5. What are the basic Datatypes supported in C Programming Language?
Ans: The Datatypes in C Language are broadly classified into 4 categories. They are as follows:

Basic Datatypes
Derived Datatypes
Enumerated Datatypes
Void Datatypes
------------------------------------------------------------------------------------------------------------------------------------------------
6. What do you mean by Dangling Pointer Variable in C Programming?

Ans: A Pointer in C Programming is used to point the memory location of an existing variable. 
In case if that particular variable is deleted and the Pointer is still pointing to the same memory location,
then that particular pointer variable is called as a Dangling Pointer Variable.
--------------------------------------------------------------------------------------------------------------------------------------------------
7. What are static variables and functions?
Ans: The variables and functions that are declared using the keyword Static are considered as Static Variable and Static Functions.
The variables declared using Static keyword will have their scope restricted to the function in which they are declared.
---------------------------------------------------------------------------------------------------------------------------------------------------
8. What are the valid places where the programmer can apply Break Control Statement?
Ans: Break Control statement is valid to be used inside a loop and Switch control statements.
---------------------------------------------------------------------------------------------------------------------------------------------------
9. Can a C program be compiled or executed in the absence of a main()?
Ans: The program will be compiled but will not be executed. To execute any C program, main() is required.
----------------------------------------------------------------------------------------------------------------------------------------------------
10. What is Preprocessor?
Ans: A Preprocessor Directive is considered as a built-in predefined function or macro that acts as a directive to the compiler and 
it gets executed before the actual C Program is executed.
-----------------------------------------------------------------------------------------------------------------------------------------------------
11. difference between call by value and call by reference in C ?     (S)
ans: In Call by value, a copy of the variable is passed whereas in Call by reference, a variable itself is passed.
     n Call by value, actual and formal arguments will be created in different memory locations whereas 
     In Call by reference, actual and formal arguments will be created in the same memory location.
-----------------------------------------------------------------------------------------------------------------------------------------------------
12.difference between the local variable and global variable in C?    (S)
ans :Local variable   :	A variable which is declared inside function or block is known as a local variable.
                       Variables can be accessed only by those statements inside a function in which they are declared.
Global variable: A variable which is declared outside function or block is known as a global variable.
	Any statement in the entire program can access variables.
        
------------------------------------------------------------------------------------------------------------------------------------------------------
13. What is recursion in C? (S)
When a function calls itself, and this process is known as recursion. The function that calls itself is known as a recursive function.
basic recursion exampple ?

int factorial(int);  
int main()  
{  
 int n=5,f;  
 f=factorial;   
 printf("factorial of a number is %d",f);  
  return 0;  
}  
int factorial(int a)  
{  
  if(a==1)  
  {  
      return 1;  
  }  
  else  
  return a*factorial(a-1);   
   } 
   ------------------------------------------------------------------------------------------------------------------------------------------------------------
   14. What is dynamic memory allocation?  (S)
In case of dynamic memory allocation, memory is allocated at runtime and memory can be increased while executing the program. It is used in the linked list.
The malloc() or calloc() function is required to allocate the memory at the runtime.
example syntax:int *p= malloc(sizeof(int)*10);
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
15.Can we compile a program without main() function? (S)
Yes, we can compile, but it can't be executed.
But, if we use #define, we can compile and run a C program without using the main() function.
 example:
#include<stdio.h>    
#define start main    
void start() {    
   printf("Hello");    
}    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
16.What is an auto keyword?
In C, every local variable of a function is known as an automatic (auto) variable. Variables which are declared inside the function block are known as a local variable. 
The local variables are also known as an auto variable. It is optional to use an auto keyword before the data type of a variable. If no value is stored in the local variable, 
then it consists of a garbage value.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
17.Can we compile a program without main() function?
Yes, we can compile, but it can't be executed.

But, if we use #define, we can compile and run a C program without using the main() function. 
#include<stdio.h>    
#define start main    
void start() {    
   printf("Hello");    
}    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
18.What is a token?
The Token is an identifier. It can be constant, keyword, string literal, etc. A token is the smallest individual unit in a program. C has the following tokens:
Identifiers,Keywords,Constants,Operators,Special characters.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
19. Why is Java a platform independent language?(JAVA)
Ans. Java language was developed in such a way that it does not depend on any hardware or software due
     to the fact that the compiler compiles the code and then converts it to platform-independent byte code which can be run on multiple systems.

     The only condition to run that byte code is for the machine to have a runtime environment (JRE) installed in it.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
20. What do you understand by an instance variable and a local variable?(JAVA)
Ans. Instance variables are those variables that are accessible by all the methods in the class.
     They are declared outside the methods and inside the class. These variables describe the properties of an object and remain bound to it at any cost.

     All the objects of the class will have their copy of the variables for utilization. If any modification is done on these variables, then only that 
     instance will be impacted by it, and all other class instances continue to remain unaffected.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21. What do you mean by data encapsulation?(JAVA)
Ans. a) Data Encapsulation is an Object-Oriented Programming concept of hiding the data attributes and their behaviors in a single unit.
     b) It helps developers to follow modularity while developing software by ensuring that each object is independent of other objects by having its
       own methods, attributes, and functionalities.
     c) It is used for the security of the private properties of an object and hence serves the purpose of data hiding.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
22. Explain the concept of constructor overloading.(JAVA)
Ans. Constructor overloading is the process of creating multiple constructors in the class consisting of the same name with a difference in the constructor parameters.
     Depending upon the number of parameters and their corresponding types, distinguishing of the different types of constructors is done by the compiler.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23. Explain Method OverRiding.(JAVA)
Ans. Method overriding is the concept in which two methods having the same method signature are present in two different classes in which an inheritance relationship is present.
     A particular method implementation (already present in the base class) is possible for the derived class by using method overriding.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24. Explain Method OverLoading.(JAVA)
Ans. Method overloading is made possible by introducing different methods in the same class consisting of the same name. Still, all the functions differ in the number or type of parameters.
     It takes place inside a class and enhances program readability.
     The only difference in the return type of the method does not promote method overloading.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
25. Explain the use of final keyword in variable, method and class.(JAVA)
Ans. In Java, the final keyword is used as defining something as constant /final and represents the non-access modifier.

a. final variable:
   When a variable is declared as final in Java, the value can’t be modified once it has been assigned.
   If any value has not been assigned to that variable, then it can be assigned only by the constructor of the class.
b. final method:
   A method declared as final cannot be overridden by its children's classes.
   A constructor cannot be marked as final because whenever a class is inherited, the constructors are not inherited. Hence, marking it final doesn't make sense.
   Java throws compilation error saying - modifier final not allowed here
c. final class:
   No classes can be inherited from the class declared as final. But that final class can extend other classes for its usage.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
26. When can you use super keyword?
Ans. The super keyword is used to access hidden fields and overridden methods or attributes of the parent class.
     Following are the cases when this keyword can be used:
     Accessing data members of parent class when the member names of the class and its child subclasses are same.
     To call the default and parameterized constructor of the parent class inside the child class.
     Accessing the parent class methods when the child classes have overridden them.
     The following example demonstrates all 3 cases when a super keyword is used.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
27. What is the main objective of garbage collection?
Ans. The main objective of this process is to free up the memory space occupied by the unnecessary 
     and unreachable objects during the Java program execution by deleting those unreachable objects.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
28. Using relevant properties highlight the differences between interfaces and abstract classes.
Ans. Availability of methods: Only abstract methods are available in interfaces, whereas non-abstract methods can be present along with abstract methods in abstract classes.
     Variable types: Static and final variables can only be declared in the case of interfaces, whereas abstract classes can also have non-static and non-final variables.
     Inheritance: Multiple inheritances are facilitated by interfaces, whereas abstract classes do not promote multiple inheritances.
     Data member accessibility: By default, the class data members of interfaces are of the public- type. Conversely,
     the class members for an abstract class can be protected or private also.
     Implementation: With the help of an abstract class, the implementation of an interface is easily possible. However, the converse is not true.-
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
29. What happens if the static modifier is not included in the main method signature in Java?
Ans. There wouldn't be any compilation error. But then the program is run, since the JVM cant map the main method signature,
     the code throws “NoSuchMethodError” error at the runtime.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
30. Will the finally block get executed when the return statement is written at the end of try block and catch block as shown below?
public int someMethod(int i){
   try{
       //some statement
       return 1;
   }catch(Exception e){
       //some statement
       return 999;
   }finally{
       //finally block statements
     }
  }
  finally block will be executed irrespective of the exception or not.
  The only case where finally block is not executed is when it encounters ‘System.exit()’ method anywhere in try/catch block.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
31. Although inheritance is a popular OOPs concept, it is less advantageous than composition. Explain.
Ans. Inheritance lags behind composition in the following scenarios:

    a] Multiple-inheritance is not possible in Java. Classes can only extend from one superclass.
     In cases where multiple functionalities are required, for example - to read and write information into the file,
     the pattern of composition is preferred. The writer, as well as reader functionalities, can be made use of by considering them as the private members.
    b] Composition assists in attaining high flexibility and prevents breaking of encapsulation.
    c] Unit testing is possible with composition and not inheritance. When a developer wants to test a class composing a different class,
       then Mock Object can be created for signifying the composed class to facilitate testing. This technique is not possible with the help of inheritance
       as the derived class cannot be tested without the help of the superclass in inheritance.
    d] The loosely coupled nature of composition is preferable over the tightly coupled nature of inheritance.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
32. Why is synchronization necessary? Explain with the help of a relevant example.
Ans. Concurrent execution of different processes is made possible by synchronization. When a particular resource is shared between many threads,
     situations may arise in which multiple threads require the same shared resource.

    Synchronization assists in resolving the issue and the resource is shared by a single thread at a time. Let’s take an example to understand it more clearly.
   For example, you have a URL and you have to find out the number of requests made to it. Two simultaneous requests can make the count erratic.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
33. Can you explain the Java thread lifecycle?
Ans. Java thread life cycle is as follows:

    1. New – When the instance of the thread is created and the start() method has not been invoked, the thread is considered to be alive and hence in the NEW state.
    2. Runnable – Once the start() method is invoked, before the run() method is called by JVM, the thread is said to be in RUNNABLE (ready to run) state. 
       This state can also be entered from the Waiting or Sleeping state of the thread.
    3. Running – When the run() method has been invoked and the thread starts its execution, the thread is said to be in a RUNNING state.
    4. Non-Runnable (Blocked/Waiting) – When the thread is not able to run despite the fact of its aliveness, the thread is said to be in a NON-RUNNABLE state.
       Ideally, after some time of its aliveness, the thread should go to a runnable state.
        a] A thread is said to be in a Blocked state if it wants to enter synchronized code but it is unable to as another thread is 
           operating in that synchronized block on the same object. The first thread has to wait until the other thread exits the synchronized block.
        b] A thread is said to be in a Waiting state if it is waiting for the signal to execute from another thread, i.e it waits for work until the signal is received.
    5. Terminated – Once the run() method execution is completed, the thread is said to enter the TERMINATED step and is considered to not be alive.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
34. What do you understand by marker interfaces in Java?
Ans. Marker interfaces, also known as tagging interfaces are those interfaces that have no methods and constants defined in them.
     They are there for helping the compiler and JVM to get run time-related information regarding the objects.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
35. List the features of Java Programming language.
Ans. There are the following features in Java Programming Language.

     a] Simple: Java is easy to learn. The syntax of Java is based on C++ which makes easier to write the program in it.

     b] Object-Oriented: Java follows the object-oriented paradigm which allows us to maintain our code as the combination of different type of objects
       that incorporates both data and behavior.

     c] Portable: Java supports read-once-write-anywhere approach. We can execute the Java program on every machine. Java program (.java) is converted to bytecode (.class) 
        which can be easily run on every machine.

     d] Platform Independent: Java is a platform independent programming language. It is different from other programming languages like C and C++ which needs a platform to be executed.
        Java comes with its platform on which its code is executed. Java doesn't depend upon the operating system to be executed.

     e] Secured: Java is secured because it doesn't use explicit pointers. Java also provides the concept of ByteCode and Exception handling which makes it more secured.

     f] Robust: Java is a strong programming language as it uses strong memory management. The concepts like Automatic garbage collection, Exception handling, etc. make it more robust.

     g] Architecture Neutral: Java is architectural neutral as it is not dependent on the architecture. In C, the size of data types may vary according to the architecture (32 bit or 64 bit) which doesn't exist in Java.

     h] Interpreted: Java uses the Just-in-time (JIT) interpreter along with the compiler for the program execution.

     i] High Performance: Java is faster than other traditional interpreted programming languages because Java bytecode is "close" to native code. It is still a little bit slower than a compiled language (e.g., C++).

     j] Multithreaded: We can write Java programs that deal with many tasks at once by defining multiple threads. The main advantage of multi-threading is that it doesn't occupy memory for each thread. 
        It shares a common memory area. Threads are important for multi-media, Web applications, etc.

     k] Distributed: Java is distributed because it facilitates users to create distributed applications in Java. RMI and EJB are used for creating distributed applications.
        This feature of Java makes us able to access files by calling the methods from any machine on the internet.

     l] Dynamic: Java is a dynamic language. It supports dynamic loading of classes. It means classes are loaded on demand. It also supports functions from its native languages, i.e., C and C++.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1. Reverse A given Number
Ans. while (n != 0) {
        remainder = n % 10;
        rev = rev * 10 + remainder;
        n /= 10;
    }
--------------------------------------------------------------------------------------------------------------------------------------------
2. Find Number Is Armstrong Or Not
Ans.while(n>0)    
{    
r=n%10;    
sum=sum+(r*r*r);    
n=n/10;    
}    
if(temp==sum)    
printf("armstrong  number ");    
else    
printf("not armstrong number");    
---------------------------------------------------------------------------------------------------------------------------------------------
3. Calculate Sum of Natural Numbers
Ans. for (i = 1; i <= n; ++i) {
        sum += i;
    }
----------------------------------------------------------------------------------------------------------------------------------------------
4. Display Fibonacci Series
Ans.  printf("\n%d %d",n1,n2);//printing 0 and 1    
 for(i=2;i<number;++i)//loop starts from 2 because 0 and 1 are already printed    
 {    
  n3=n1+n2;    
  printf(" %d",n3);    
  n1=n2;    
  n2=n3;    
 }  
-----------------------------------------------------------------------------------------------------------------------------------------------
5. What are the basic Datatypes supported in C Programming Language?
Ans: The Datatypes in C Language are broadly classified into 4 categories. They are as follows:

Basic Datatypes
Derived Datatypes
Enumerated Datatypes
Void Datatypes
------------------------------------------------------------------------------------------------------------------------------------------------
6. What do you mean by Dangling Pointer Variable in C Programming?

Ans: A Pointer in C Programming is used to point the memory location of an existing variable. 
In case if that particular variable is deleted and the Pointer is still pointing to the same memory location,
then that particular pointer variable is called as a Dangling Pointer Variable.
--------------------------------------------------------------------------------------------------------------------------------------------------
7. What are static variables and functions?
Ans: The variables and functions that are declared using the keyword Static are considered as Static Variable and Static Functions.
The variables declared using Static keyword will have their scope restricted to the function in which they are declared.
---------------------------------------------------------------------------------------------------------------------------------------------------
8. What are the valid places where the programmer can apply Break Control Statement?
Ans: Break Control statement is valid to be used inside a loop and Switch control statements.
---------------------------------------------------------------------------------------------------------------------------------------------------
9. Can a C program be compiled or executed in the absence of a main()?
Ans: The program will be compiled but will not be executed. To execute any C program, main() is required.
----------------------------------------------------------------------------------------------------------------------------------------------------
10. What is Preprocessor?
Ans: A Preprocessor Directive is considered as a built-in predefined function or macro that acts as a directive to the compiler and 
it gets executed before the actual C Program is executed.
-----------------------------------------------------------------------------------------------------------------------------------------------------
11. difference between call by value and call by reference in C ?     (S)
ans: In Call by value, a copy of the variable is passed whereas in Call by reference, a variable itself is passed.
     n Call by value, actual and formal arguments will be created in different memory locations whereas 
     In Call by reference, actual and formal arguments will be created in the same memory location.
-----------------------------------------------------------------------------------------------------------------------------------------------------
12.difference between the local variable and global variable in C?    (S)
ans :Local variable   :	A variable which is declared inside function or block is known as a local variable.
                       Variables can be accessed only by those statements inside a function in which they are declared.
Global variable: A variable which is declared outside function or block is known as a global variable.
	Any statement in the entire program can access variables.
        
------------------------------------------------------------------------------------------------------------------------------------------------------
13. What is recursion in C? (S)
When a function calls itself, and this process is known as recursion. The function that calls itself is known as a recursive function.
basic recursion exampple ?

int factorial(int);  
int main()  
{  
 int n=5,f;  
 f=factorial;   
 printf("factorial of a number is %d",f);  
  return 0;  
}  
int factorial(int a)  
{  
  if(a==1)  
  {  
      return 1;  
  }  
  else  
  return a*factorial(a-1);   
   } 
   ------------------------------------------------------------------------------------------------------------------------------------------------------------
   14. What is dynamic memory allocation?  (S)
In case of dynamic memory allocation, memory is allocated at runtime and memory can be increased while executing the program. It is used in the linked list.
The malloc() or calloc() function is required to allocate the memory at the runtime.
example syntax:int *p= malloc(sizeof(int)*10);
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
15.Can we compile a program without main() function? (S)
Yes, we can compile, but it can't be executed.
But, if we use #define, we can compile and run a C program without using the main() function.
 example:
#include<stdio.h>    
#define start main    
void start() {    
   printf("Hello");    
}    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
16.What is an auto keyword?
In C, every local variable of a function is known as an automatic (auto) variable. Variables which are declared inside the function block are known as a local variable. 
The local variables are also known as an auto variable. It is optional to use an auto keyword before the data type of a variable. If no value is stored in the local variable, 
then it consists of a garbage value.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
17.Can we compile a program without main() function?
Yes, we can compile, but it can't be executed.

But, if we use #define, we can compile and run a C program without using the main() function. 
#include<stdio.h>    
#define start main    
void start() {    
   printf("Hello");    
}    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
18.What is a token?
The Token is an identifier. It can be constant, keyword, string literal, etc. A token is the smallest individual unit in a program. C has the following tokens:
Identifiers,Keywords,Constants,Operators,Special characters.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
19. Why is Java a platform independent language?(JAVA)
Ans. Java language was developed in such a way that it does not depend on any hardware or software due
     to the fact that the compiler compiles the code and then converts it to platform-independent byte code which can be run on multiple systems.

     The only condition to run that byte code is for the machine to have a runtime environment (JRE) installed in it.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
20. What do you understand by an instance variable and a local variable?(JAVA)
Ans. Instance variables are those variables that are accessible by all the methods in the class.
     They are declared outside the methods and inside the class. These variables describe the properties of an object and remain bound to it at any cost.

     All the objects of the class will have their copy of the variables for utilization. If any modification is done on these variables, then only that 
     instance will be impacted by it, and all other class instances continue to remain unaffected.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21. What do you mean by data encapsulation?(JAVA)
Ans. a) Data Encapsulation is an Object-Oriented Programming concept of hiding the data attributes and their behaviors in a single unit.
     b) It helps developers to follow modularity while developing software by ensuring that each object is independent of other objects by having its
       own methods, attributes, and functionalities.
     c) It is used for the security of the private properties of an object and hence serves the purpose of data hiding.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
22. Explain the concept of constructor overloading.(JAVA)
Ans. Constructor overloading is the process of creating multiple constructors in the class consisting of the same name with a difference in the constructor parameters.
     Depending upon the number of parameters and their corresponding types, distinguishing of the different types of constructors is done by the compiler.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23. Explain Method OverRiding.(JAVA)
Ans. Method overriding is the concept in which two methods having the same method signature are present in two different classes in which an inheritance relationship is present.
     A particular method implementation (already present in the base class) is possible for the derived class by using method overriding.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24. Explain Method OverLoading.(JAVA)
Ans. Method overloading is made possible by introducing different methods in the same class consisting of the same name. Still, all the functions differ in the number or type of parameters.
     It takes place inside a class and enhances program readability.
     The only difference in the return type of the method does not promote method overloading.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
25. Explain the use of final keyword in variable, method and class.(JAVA)
Ans. In Java, the final keyword is used as defining something as constant /final and represents the non-access modifier.

a. final variable:
   When a variable is declared as final in Java, the value can’t be modified once it has been assigned.
   If any value has not been assigned to that variable, then it can be assigned only by the constructor of the class.
b. final method:
   A method declared as final cannot be overridden by its children's classes.
   A constructor cannot be marked as final because whenever a class is inherited, the constructors are not inherited. Hence, marking it final doesn't make sense.
   Java throws compilation error saying - modifier final not allowed here
c. final class:
   No classes can be inherited from the class declared as final. But that final class can extend other classes for its usage.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------






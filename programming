difference between call by value and call by reference in C ?     (S)
ans: In Call by value, a copy of the variable is passed whereas in Call by reference, a variable itself is passed.
     n Call by value, actual and formal arguments will be created in different memory locations whereas 
     In Call by reference, actual and formal arguments will be created in the same memory location.
-----------------------------------------------------------------------------------------------------------------------------------
23. Explain Method OverRiding.(JAVA)
Ans. Method overriding is the concept in which two methods having the same method signature are present in two different classes in which an inheritance relationship is present.
     A particular method implementation (already present in the base class) is possible for the derived class by using method overriding.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24. Explain Method OverLoading.(JAVA)
Ans. Method overloading is made possible by introducing different methods in the same class consisting of the same name. Still, all the functions differ in the number or type of parameters.
     It takes place inside a class and enhances program readability.
     The only difference in the return type of the method does not promote method overloading.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
When can you use super keyword?
Ans. The super keyword is used to access hidden fields and overridden methods or attributes of the parent class.
     Following are the cases when this keyword can be used:
     Accessing data members of parent class when the member names of the class and its child subclasses are same.
     To call the default and parameterized constructor of the parent class inside the child class.
     Accessing the parent class methods when the child classes have overridden them.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Using relevant properties highlight the differences between interfaces and abstract classes.
Ans. Availability of methods: Only abstract methods are available in interfaces, whereas non-abstract methods can be present along with abstract methods in abstract classes.
     Variable types: Static and final variables can only be declared in the case of interfaces, whereas abstract classes can also have non-static and non-final variables.
     Inheritance: Multiple inheritances are facilitated by interfaces, whereas abstract classes do not promote multiple inheritances.
     Data member accessibility: By default, the class data members of interfaces are of the public- type. Conversely,
     the class members for an abstract class can be protected or private also.
     Implementation: With the help of an abstract class, the implementation of an interface is easily possible. However, the converse is not true.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
List the features of Java Programming language.
Ans. There are the following features in Java Programming Language.

     a] Simple: Java is easy to learn. The syntax of Java is based on C++ which makes easier to write the program in it.

     b] Object-Oriented: Java follows the object-oriented paradigm which allows us to maintain our code as the combination of different type of objects
       that incorporates both data and behavior.

     c] Portable: Java supports read-once-write-anywhere approach. We can execute the Java program on every machine. Java program (.java) is converted to bytecode (.class) 
        which can be easily run on every machine.

     d] Platform Independent: Java is a platform independent programming language. It is different from other programming languages like C and C++ which needs a platform to be executed.
        Java comes with its platform on which its code is executed. Java doesn't depend upon the operating system to be executed.

     e] Secured: Java is secured because it doesn't use explicit pointers. Java also provides the concept of ByteCode and Exception handling which makes it more secured.

     f] Robust: Java is a strong programming language as it uses strong memory management. The concepts like Automatic garbage collection, Exception handling, etc. make it more robust.

     g] Architecture Neutral: Java is architectural neutral as it is not dependent on the architecture. In C, the size of data types may vary according to the architecture (32 bit or 64 bit) which doesn't exist in Java.

     h] Interpreted: Java uses the Just-in-time (JIT) interpreter along with the compiler for the program execution.

     i] High Performance: Java is faster than other traditional interpreted programming languages because Java bytecode is "close" to native code. It is still a little bit slower than a compiled language (e.g., C++).

     j] Multithreaded: We can write Java programs that deal with many tasks at once by defining multiple threads. The main advantage of multi-threading is that it doesn't occupy memory for each thread. 
        It shares a common memory area. Threads are important for multi-media, Web applications, etc.

     k] Distributed: Java is distributed because it facilitates users to create distributed applications in Java. RMI and EJB are used for creating distributed applications.
        This feature of Java makes us able to access files by calling the methods from any machine on the internet.

     l] Dynamic: Java is a dynamic language. It supports dynamic loading of classes. It means classes are loaded on demand. It also supports functions from its native languages, i.e., C and C++.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. What do you mean by Dangling Pointer Variable in C Programming?

Ans: A Pointer in C Programming is used to point the memory location of an existing variable. 
In case if that particular variable is deleted and the Pointer is still pointing to the same memory location,
then that particular pointer variable is called as a Dangling Pointer Variable.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.What is dynamic memory allocation?  (S)
In case of dynamic memory allocation, memory is allocated at runtime and memory can be increased while executing the program. It is used in the linked list.
The malloc() or calloc() function is required to allocate the memory at the runtime.
example syntax:int *p= malloc(sizeof(int)*10);
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12.difference between the local variable and global variable in C?    (S)
ans :Local variable   :	A variable which is declared inside function or block is known as a local variable.
                       Variables can be accessed only by those statements inside a function in which they are declared.
Global variable: A variable which is declared outside function or block is known as a global variable.
	Any statement in the entire program can access variables.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
21. What do you mean by data encapsulation?(JAVA)
Ans. a) Data Encapsulation is an Object-Oriented Programming concept of hiding the data attributes and their behaviors in a single unit.
     b) It helps developers to follow modularity while developing software by ensuring that each object is independent of other objects by having its
       own methods, attributes, and functionalities.
     c) It is used for the security of the private properties of an object and hence serves the purpose of data hiding.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
						Code::
1.Factorial using recurrsion
int factorial(int a)  
{  
  if(a==1)  
  {  
      return 1;  
  }  
  else  
  return a*factorial(a-1);   
}

4. Display Fibonacci Series
Ans.  printf("\n%d %d",n1,n2);//printing 0 and 1    
 for(i=2;i<number;++i)//loop starts from 2 because 0 and 1 are already printed    
 {    
  n3=n1+n2;    
  printf(" %d",n3);    
  n1=n2;    
  n2=n3;    
 }  

1.Write a program to print "hello world" without using a semicolon?
#include<stdio.h> 
void main(){      
 if(printf("hello world")){} // It prints the ?hello world? on the screen.  
}     
----------------------------------------------------------------------------------
2.Write a program to swap two numbers without using the third variable?\
//logic
a=a+b;//a=30 (10+20)       
b=a-b;//b=10 (30-20)      
a=a-b;//a=20 (30-10)      
-----------------------------------------------------------------------------------
30. Will the finally block get executed when the return statement is written at the end of try block and catch block as shown below?
public int someMethod(int i){
   try{
       //some statement
       return 1;
   }catch(Exception e){
       //some statement
       return 999;
   }finally{
       //finally block statements
     }
  }
 

 
